 // Bulk delete submitted candidates
  app.delete('/api/submitted-candidates/bulk', async (req: AuthenticatedRequest, res: Response) => {
    console.log('=== BULK DELETE REQUEST START ===');
    console.log('Request body:', JSON.stringify(req.body, null, 2));

    try {
      // Check authentication
      if (!req.isAuthenticated() || req.user?.role !== 'admin') {
        return res.status(403).json({ 
          success: false, 
          message: "Unauthorized access" 
        });
      }

      const { ids } = req.body;

      // Validate request structure
      if (!ids || !Array.isArray(ids) || ids.length === 0) {
        return res.status(400).json({ 
          success: false, 
          message: "Invalid request: 'ids' must be a non-empty array" 
        });
      }

      // Convert and validate IDs with more robust validation
      const validIds: number[] = [];
      const invalidIds: any[] = [];
      
      for (const id of ids) {
        // Handle both string and number inputs
        const numId = typeof id === 'number' ? id : parseInt(String(id), 10);
        console.log(`Processing ID: ${id} (type: ${typeof id}) -> ${numId} (type: ${typeof numId})`);
        
        if (Number.isInteger(numId) && numId > 0 && !isNaN(numId)) {
          validIds.push(numId);
        } else {
          invalidIds.push(id);
        }
      }

      console.log('Valid IDs for deletion:', validIds);
      console.log('Invalid IDs rejected:', invalidIds);

      if (validIds.length === 0) {
        return res.status(400).json({ 
          success: false, 
          message: `Invalid candidate ID` 
        });
      }

      // Check which candidates actually exist in the database (similar to single delete logic)
      const existingCandidates = [];
      const nonExistentIds = [];

      for (const id of validIds) {
        try {
          const candidate = await storage.getSubmittedCandidateById(id);
          if (candidate) {
            existingCandidates.push(id);
          } else {
            nonExistentIds.push(id);
          }
        } catch (error) {
          console.error(`Error checking candidate ${id}:`, error);
          nonExistentIds.push(id);
        }
      }

      if (existingCandidates.length === 0) {
        return res.status(404).json({
          success: false,
          message: `No candidates found with the provided IDs: ${validIds.join(', ')}`
        });
      }

      // Perform bulk deletion using storage method for existing candidates only
      const result = await storage.bulkDeleteSubmittedCandidates(existingCandidates);
      
      console.log('Bulk deletion completed:', result);

      // Prepare response based on results
      if (nonExistentIds.length > 0) {
        return res.status(207).json({
          success: true,
          message: `Partially successful: deleted ${result.deletedCount} of ${validIds.length} candidates`,
          count: result.deletedCount,
          deletedCount: result.deletedCount,
          totalRequested: validIds.length,
          nonExistentIds,
          partialSuccess: true
        });
      } else {
        return res.status(200).json({
          success: true,
          message: `Successfully deleted ${result.deletedCount} candidate${result.deletedCount !== 1 ? 's' : ''}`,
          count: result.deletedCount,
          deletedCount: result.deletedCount,
          totalRequested: validIds.length
        });
      }

    } catch (error) {
      console.error('=== BULK DELETE ERROR ===');
      console.error('Error details:', error);

      return res.status(500).json({ 
        success: false, 
        message: "Invalid candidate ID",
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  });