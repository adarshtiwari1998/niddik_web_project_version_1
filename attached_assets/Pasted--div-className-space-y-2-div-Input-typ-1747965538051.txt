  <div className="space-y-2">
                <div>
                  <Input
                    type="file"
                  accept=".pdf,.doc,.docx,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                  onChange={async (e) => {
                    const file = e.target.files?.[0];
                    if (file) {
                      const ext = file.name.split('.').pop()?.toLowerCase();
                      if (!['pdf', 'doc', 'docx'].includes(ext || '')) {
                        toast({
                          title: "Invalid file format",
                          description: "Please upload only PDF, DOC, or DOCX files",
                          variant: "destructive"
                        });
                        e.target.value = '';
                        return;
                      }

                      setResumeFile(file);
                      setIsUploading(true);

                      const formData = new FormData();
                      formData.append("resume", file);

                      try {
                        const response = await fetch("/api/upload-resume", {
                          method: "POST",
                          body: formData,
                        });

                        if (!response.ok) {
                          throw new Error("Unable to upload resume.");
                        }

                        const data = await response.json();

                        // Update user data to reflect new resume URL
                        queryClient.invalidateQueries({ queryKey: ["/api/user"] });

                        toast({
                          title: "Resume uploaded",
                          description: "Your resume has been uploaded successfully.",
                        });

                      } catch (error) {
                        toast({
                          title: "Upload failed",
                          description: "Unable to upload resume. Please try again.",
                          variant: "destructive",
                        });
                        setResumeFile(null);
                        e.target.value = '';
                      } finally {
                        setIsUploading(false);
                      }
                    }
                  }}
                  placeholder="Upload resume"
                  className="file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-primary file:text-primary-foreground hover:file:bg-primary/90"
                />
                {isUploading && (
                  <div className="flex items-center gap-2 mt-2 text-sm text-muted-foreground">
                    <Loader2 className="h-4 w-4 animate-spin" />
                    Uploading resume...
                  </div>
                )}
                {user?.resumeUrl && !isUploading && (
  <div className="p-4 border rounded-md bg-muted/5">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <FileText className="h-4 w-4 text-primary" />
                        <a href={user?.resumeUrl} target="_blank" rel="noopener noreferrer" className="text-sm hover:underline">
                          View Resume
                        </a>
                      </div>

                    </div>
                  </div>
                )}
              </div>
            )}
        </div>
        <div className="space-y-4">
          {/* Application Form */}
          <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
                      control={form.control}
                      name="note"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Cover Letter / Note *</FormLabel>
                          <FormControl>
                            <Textarea 
                              {...field} 
                              placeholder="Tell us why you're interested in this position and how your experience makes you a great fit."
                              className="min-h-[120px]"
                            />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <div className="flex justify-end gap-2 pt-2">
                      <DialogClose asChild>
                        <Button type="button" variant="outline">Cancel</Button>
                      </DialogClose>
                      <Button 
                        type="submit" 
                        disabled={applyMutation.isPending}
                      >
                        {applyMutation.isPending ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            Submitting...
                          </>
                        ) : "Submit Application"}
                      </Button>
                    </div>
                  </form>
                </Form>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </main>