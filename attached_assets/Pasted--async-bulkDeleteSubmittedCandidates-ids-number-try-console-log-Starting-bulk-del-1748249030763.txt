 async bulkDeleteSubmittedCandidates(ids: number[]) {
    try {
      console.log(`Starting bulk delete for ${ids.length} candidates with IDs:`, ids);
      console.log('ID types:', ids.map(id => ({ id, type: typeof id, isInteger: Number.isInteger(id) })));

      if (ids.length === 0) {
        return { deletedCount: 0, totalRequested: 0 };
      }

      // Validate all IDs are positive integers
      const invalidIds = ids.filter(id => !Number.isInteger(id) || id <= 0);
      if (invalidIds.length > 0) {
        console.error('Invalid IDs found:', invalidIds);
        throw new Error(`Invalid candidate IDs: ${invalidIds.join(', ')}`);
      }

      // First, let's check which IDs actually exist
      console.log('Checking for existing records...');
      const existingRecords = await db.query.submittedCandidates.findMany({
        where: inArray(submittedCandidates.id, ids),
        columns: { id: true }
      });
      
      console.log(`Found ${existingRecords.length} existing records out of ${ids.length} requested IDs`);
      console.log('Existing IDs:', existingRecords.map(r => r.id));
      console.log('Missing IDs:', ids.filter(id => !existingRecords.some(r => r.id === id)));

      if (existingRecords.length === 0) {
        console.log('No records found to delete');
        return { deletedCount: 0, totalRequested: ids.length };
      }

      // Process deletion in chunks to avoid database limits
      const chunkSize = 50;
      let totalDeleted = 0;

      for (let i = 0; i < ids.length; i += chunkSize) {
        const chunk = ids.slice(i, i + chunkSize);
        console.log(`Processing chunk ${Math.floor(i / chunkSize) + 1}: ${chunk.length} candidates with IDs:`, chunk);

        try {
          // Delete the chunk and count actual deletions
          const result = await db.delete(submittedCandidates)
            .where(inArray(submittedCandidates.id, chunk))
            .returning({ id: submittedCandidates.id });

          const chunkDeleted = result.length;
          totalDeleted += chunkDeleted;

          console.log(`Chunk ${Math.floor(i / chunkSize) + 1}: deleted ${chunkDeleted} out of ${chunk.length} candidates`);
          console.log('Deleted IDs:', result.map(r => r.id));
        } catch (chunkError) {
          console.error(`Error deleting chunk ${Math.floor(i / chunkSize) + 1}:`, chunkError);
          // Continue with next chunk instead of failing completely
          continue;
        }
      }

      console.log(`Bulk delete completed: ${totalDeleted} of ${ids.length} candidates deleted`);
      return { deletedCount: totalDeleted, totalRequested: ids.length };
    } catch (error) {
      console.error('Bulk delete error:', error);
      throw error;
    }
  },